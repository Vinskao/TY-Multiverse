---
import { getCollection } from 'astro:content';

// Layout import — provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from '../layouts/BaseLayout.astro';

// Component Imports
import CallToAction from '../components/CallToAction.astro';
import Grid from '../components/Grid.astro';
import Hero from '../components/Hero.astro';
import Icon from '../components/Icon.astro';
import Pill from '../components/Pill.astro';
import PortfolioPreview from '../components/PortfolioPreview.astro';

// Page section components
import ContactCTA from '../components/ContactCTA.astro';
import Skills from '../components/Skills.astro';

// Content Fetching: List four most recent work projects
const projects = (await getCollection('work'))
	.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
	.slice(0, 4);

// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---
<head>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Kalam&display=swap">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js" async></script>
<script src="https://d3js.org/d3.v5.min.js" async></script>
</head>
<body>
	<div class="container">

		<svg id="canvas" width="600" height="300" class="contri">
			<text id="title" x="300" y="40" fill="blue" font-size="20" text-anchor="middle">Github Contributions</text>
		</svg>
	</div>

	
<BaseLayout>
	<div class="stack gap-20 lg:gap-48">
		
		<div class="wrapper stack gap-8 lg:gap-20">
			
			<header class="hero">
				
				<Hero
					title="Welcome to TY's home!"
					tagline="I'm Tianyi, your friendly tour guide, currently residing in Taipei, Taiwan."
					align="start"
				>
				
					<div class="roles">
						<Pill><Icon icon="code" size="1.33em" /> Developer</Pill>
						<Pill><Icon icon="microphone-stage" size="1.33em" /> Toastmaster</Pill>
						<Pill><Icon icon="pencil-line" size="1.33em" /> Writer</Pill>
					</div>
					<div id="roles-image" class="roles-image" style="width: 300px; height: 270px; border: 5px solid purple; border-radius: 10%; overflow: hidden;">
						<img src="https://github-readme-stats.vercel.app/api/top-langs/?username=Vinskao" alt="Top Languages" style="width: 100%; height: 100%; object-fit: cover; border-radius: 0; opacity: 0.9;">
					
					</div>
					
				</Hero>
				<div class="video-container">
					
					<video autoplay loop muted playsinline width="479" height="613" style="border-radius: 2.5rem; box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.4); ">
						<source src="/assets/protrait.mp4" type="video/mp4">
						Your browser does not support the video tag.
					</video>
					<div class="text-overlay">
						"I aim to be a valuable developer, part of an exceptional team, using technology and a passion for innovation to make a difference in the world."
					</div>
				</div>
				

			</header>
			
			<Skills />
		</div>
		
		<main class="wrapper stack gap-20 lg:gap-48">
			<section class="section with-background with-cta">
				<header class="section-header stack gap-2 lg:gap-4">
					<h3>Collections</h3>
					<p>Take a look below at some of my featured work.</p>
				</header>

				<div class="gallery">
					<Grid variant="offset">
						{
							projects.map((project) => (
								<li>
									<PortfolioPreview project={project} />
								</li>
							))
						}
					</Grid>
				</div>

				<div class="cta">
					<CallToAction href="/work/">
						View All
						<Icon icon="arrow-right" size="1.2em" />
					</CallToAction>
				</div>
			</section>

			<section class="section with-background bg-variant">
				<header class="section-header stack gap-2 lg:gap-4">
					<h3>Mentions</h3>
					<p>
						I have been fortunate enough to receive praise for my work in several publications. Take
						a look below to learn more.
					</p>
				</header>

				<div class="gallery">
					<Grid variant="small">
						{
							['Medium', 'BuzzFeed', 'The Next Web', 'awwwards.', 'TechCrunch'].map((brand) => (
								<li class="mention-card">
									<p>{brand}</p>
								</li>
							))
						}
					</Grid>
				</div>
			</section>
		</main>

		<ContactCTA />
	</div>
</BaseLayout>

<style>
	.contri {
		position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 999; 
    }

	.container {
		display: absolute;
		flex-direction: column;
		align-items: flex-start;
		position: fixed;
		top: 0;
		left: 0;
		z-index: 999;
		padding: 20px; 
	}

	#canvas {
		min-height: 300px;
		min-width: 600px;
	}

	.video-container {
		position: relative; 
	}
	
	.text-overlay {
		position: absolute; 
		top: 25%; 
		left: 64%; 
		transform: translate(-135%, -42%); 
		color: #fafafa;  
		padding: 10px; 
		z-index: 1; 
		font-size: 20px;
		width: 55%;
		font-weight: bold;
		font-family: 'Kalam', cursive;
		opacity: 0; 
		background: linear-gradient(
        166deg, 
        rgba(51, 2, 125, 0.65) 0%, 
        rgba(128, 0, 128, 0.25) 15%, 
        rgba(128, 0, 128, 0.55) 30%, 
        rgba(128, 0, 128, 0.15) 45%, 
        rgba(128, 0, 128, 0.65) 60%, 
        rgba(128, 0, 128, 0.40) 75%, 
        rgba(64, 9, 146, 0.9) 100%
    	);
		background-size: cover; 
		background-repeat: no-repeat; 
		border-radius: 30px; 
		text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
   		animation: fadeIn 1s ease-in forwards;
		backdrop-filter: blur(10px);
		padding: 25px;
		word-spacing: 10px;
		box-shadow: 0 0 40px rgba(128, 0, 128, 0.5);
		transition: top 0.5s ease, left 10s ease;
		letter-spacing: 1.5px;
	}

	@keyframes fadeIn {
		from {
			opacity: 0; 
		}
		to {
			opacity: 1; 
		}
	}

	svg {
            background-color: whitesmoke;
    }

	.hero {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 2rem;
	}

	.roles {
		display: none;
	}

	.hero img {
		aspect-ratio: 5 / 4;
		object-fit: cover;
		object-position: top;
		border-radius: 1.5rem;
		box-shadow: var(--shadow-md);
	}

	@media (min-width: 50em) {
		.hero {
			display: grid;
			grid-template-columns: 6fr 4fr;
			padding-inline: 2.5rem;
			gap: 3.75rem;
		}

		.roles {
			margin-top: 0.5rem;
			display: flex;
			gap: 0.5rem;
		}

		.hero img {
			aspect-ratio: 3 / 4;
			border-radius: 4.5rem;
			object-fit: cover;
		}
	}

	/* ====================================================== */

	.section {
		display: grid;
		gap: 2rem;
	}

	.with-background {
		position: relative;
	}

	.with-background::before {
		--hero-bg: var(--bg-image-subtle-2);

		content: '';
		position: absolute;
		pointer-events: none;
		left: 50%;
		width: 100vw;
		aspect-ratio: calc(2.25 / var(--bg-scale));
		top: 0;
		transform: translateY(-75%) translateX(-50%);
		background:
			url('/assets/backgrounds/noise.png') top center/220px repeat,
			var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
			var(--gray-999);
		background-blend-mode: overlay, normal, normal, normal;
		mix-blend-mode: var(--bg-blend-mode);
		z-index: -1;
	}

	.with-background.bg-variant::before {
		--hero-bg: var(--bg-image-subtle-1);
	}

	.section-header {
		justify-self: center;
		text-align: center;
		max-width: 50ch;
		font-size: var(--text-md);
		color: var(--gray-300);
	}

	.section-header h3 {
		font-size: var(--text-2xl);
	}

	@media (min-width: 50em) {
		.section {
			grid-template-columns: repeat(4, 1fr);
			grid-template-areas: 'header header header header' 'gallery gallery gallery gallery';
			gap: 5rem;
		}

		.section.with-cta {
			grid-template-areas: 'header header header cta' 'gallery gallery gallery gallery';
		}

		.section-header {
			grid-area: header;
			font-size: var(--text-lg);
		}

		.section-header h3 {
			font-size: var(--text-4xl);
		}

		.with-cta .section-header {
			justify-self: flex-start;
			text-align: left;
		}

		.gallery {
			grid-area: gallery;
		}

		.cta {
			grid-area: cta;
		}
	}

	/* ====================================================== */

	.mention-card {
		display: flex;
		height: 7rem;
		justify-content: center;
		align-items: center;
		text-align: center;
		border: 1px solid var(--gray-800);
		border-radius: 1.5rem;
		color: var(--gray-300);
		background: var(--gradient-subtle);
		box-shadow: var(--shadow-sm);
	}

	@media (min-width: 50em) {
		.mention-card {
			border-radius: 1.5rem;
			height: 9.5rem;
		}
	}
</style>

<script>

const dataPoints = [];
const dateValues = [];
const monthMap = {
  '1月': 'Jan',
  '2月': 'Feb',
  '3月': 'Mar',
  '4月': 'Apr',
  '5月': 'May',
  '6月': 'Jun',
  '7月': 'Jul',
  '8月': 'Aug',
  '9月': 'Sep',
  '10月': 'Oct',
  '11月': 'Nov',
  '12月': 'Dec',
};
window.addEventListener('DOMContentLoaded', function() {
	console.log('DOM已加載');
	$(document).ready(function() {
		let jsonData; 
		$.getJSON("https://firebasestorage.googleapis.com/v0/b/graph-2cfc7.appspot.com/o/graph.json?alt=media&token=fae35fec-40f6-4244-a299-ff484d94bedc", function(response) {
			jsonData = response; 
			const contributionDays = jsonData.data.user.contributionsCollection.contributionCalendar.weeks
				.flatMap(week => week.contributionDays);
			let month;
			let dayOfMonth;
			let year;
			let fullDate;
			contributionDays.forEach(day => {
				const date = new Date(day.date);
				month = monthMap[date.toLocaleString('default', { month: 'short'})];
				dayOfMonth = date.getDate(); 
				year = date.getFullYear(); 
				fullDate = `${year}-${month}-${dayOfMonth}`;
				const contributionCount = day.contributionCount;
				dataPoints.push([fullDate, contributionCount]);
			});
			
			console.log(dataPoints);


			let heightScale
			let xScale
			let xAxisScale
			let yAxisScale

			let width = 600
			let height = 300
			let padding = 40

			let svg = d3.select('svg')

			let drawCanvas = () => {
				svg.attr('width', width)
				svg.attr('height', height)
			}

			let generateScales = () => {
				heightScale = d3.scaleLinear()
								.domain([0 , d3.max(dataPoints, (item) => {
									return item[1];
								})])
								.range([0 , height - (2 * padding)])

				xScale = d3.scaleLinear()
								.domain([0, dataPoints.length -1])
								.range([padding, width - padding])

				let datesArray = dataPoints.map((item) =>{
					return new Date(item[0])
				})

				console.log(datesArray)

				xAxisScale = d3.scaleTime()
								.domain([d3.min(datesArray), d3.max(datesArray)])
								.range([padding, width - padding])

				yAxisScale = d3.scaleLinear()
								.domain([0, d3.max(dataPoints , (item)=>{
									return item[1]
								})])
								.range([height - padding, padding])

			}

			let drawBars = () => {
				let tooltip = d3.select('body')
									.append('div')
									.attr('id','tooltips')
									.style('visibility','hidden')
									.style('width', 'auto')
									.style('height', 'auto')
				svg.selectAll('rect')
					.data(dataPoints)
					.enter()
					.append('rect')
					.attr('class', 'bar')
					.attr('width', (width - (2 * padding))/ dataPoints.length)
					.attr('data-date', (item) => {
						return item[0]
					})
					.attr('data-count', (item) => {
						return item[1]
					})
					.attr('height', (item) => {
						return heightScale(item[1])
					})
					.attr('x', (item, index) => {
						return xScale(index)
					})
					.attr('y', (item) => {
						return (height - padding - heightScale(item[1]))
					})
					.on('mouseover', (item) => {
						tooltip.transition()
							.style('visibility', 'visible')

						tooltip.text(item[0],item[1])
					})
					.on('mouseout', (item) => {
						tooltip.transition()
							.style('visibility', 'hidden')
					})
			}

			let generateAxes = () => {
				
				let xAxis = d3.axisBottom(xAxisScale).tickFormat(d3.timeFormat('%Y-%m-%d'));
				let yAxis = d3.axisLeft(yAxisScale);

				svg
					.append('g')
					.call(xAxis)
					.attr('id', 'x-axis')
					.attr('transform', `translate(0, ${height - padding})`)

				svg
					.append('g')
					.attr('id', 'y-axis')
					.attr('transform', `translate(${padding}, 0)`)
					.call(yAxis);
			}

			drawCanvas()
			generateScales()
			drawBars()
			generateAxes()


			
		
		});
		
	});
});

</script>

</body>





